/*
 * Copyright (c) 2016 TethrNet Technology Co.Ltd and others.  All rights reserved.
 * Copyright (c) 2016 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

module tsdr-syslog-collector {
    yang-version 1;
    namespace "urn:opendaylight:params:xml:ns:yang:controller:config:tsdr-syslog-collector";
    prefix "tsdr-syslog-collector";

    contact
      "Sharon Aicler <saichler@gmail.com>";
    description
        "This module contains the base YANG definitions for
        tsdr-syslog-collector impl implementation.";

    revision "2015-10-07" {
        description
            "Initial revision.";
    }

    container syslog-collector-config {
        leaf udpport {
            type uint16;
            default 514;
        }

        leaf tcpport {
            type uint16;
            default 6514;
        }

        leaf core-threadpool-size {
            type uint16;
            default 5;
        }

        leaf max-threadpool-size {
            type uint16;
            default 10;
        }

        leaf keep-alive-time {
            type uint16;
            default 10;
        }

        leaf queue-size {
            type uint16;
            default 20;
        }

        leaf store-flush-interval {
            type uint16;
            default 2500;
        }
    }

    typedef severity-id {
        type uint16 {
            range 0..7;
        }
        description "Severity from 0 to 7";
    }

    typedef facility-id {
        type uint16 {
            range 0..23;
        }
        description "Facility from 0 to 23";
    }

    grouping meta-filter {
        leaf severity {
            type severity-id;
        }
        leaf facility {
            type facility-id;
        }
        leaf sid {
            type string;
            default ".*";
            description "Messageid of syslog";
        }
        leaf host {
            type string;
            default ".*";
            description "Hostname of syslog";
        }
        leaf application {
            type string;
            default ".*";
            description "Application name of syslog";
        }
        leaf pid {
            type string;
            default ".*";
            description "Processid of syslog";
        }
        leaf content {
            type string;
            default ".*";
            description "Content Body of syslog";
        }
    }

    rpc register-filter {
        description "register a specific severity, return a listener id to listen.";
        input {
            uses meta-filter;
            leaf callback-url {
                type string;
                description "The callback URL of your app.";
            }
        }
        output {
            leaf listener-id {
                type string;
                description "The listener ID for data change listener.";
            }
        }
    }

    rpc show-register-filter {
        description "show registered filter";
        output {
            leaf result {
                type string;
                description "the result of show-register-filter RPC.";
            }
            list registered-syslog-filter {

                key "filter-id";
                leaf filter-id {
                    type string;
                    description "the unique ID of each registered filter.";
                }
                leaf callback-url {
                    type string;
                    description "The callback URL of your app.";
                }
                container registered-filter-entity {
                    uses meta-filter;
                }
            }
        }
    }

    rpc delete-registered-filter {
        description "delete registered filter";
        input {
            leaf filter-id {
                type string;
                description "the filter with the input filterID will be deleted.";
            }
        }
        output {
            leaf result {
                type string;
                description "RPC result.";
            }
        }
    }

    rpc show-threadpool-configuration {
        output {
            leaf queue-remaining-capacity {
                type uint16;
                description "the remaining capacity of the task queue.";
            }
            leaf queue-used-capacity {
                type uint16;
                description "the used capacity of the task queue.";
            }
            leaf keep-alive-time {
                type uint16;
                description "maximum time that excess idle threads will wait for new tasks
                                before terminating.Time Unit:Second.";
            }
            leaf current-alive-thread-number {
                type uint16;
                description "current alive thread in the threadpool.";
            }
            leaf core-thread-number {
                type uint16;
                description "the number of threads to keep in the pool, even if they are idle.";
            }
            leaf Max-thread-number {
                type uint16;
                description "the maximum number of threads to allow in the pool.";
            }
        }
    }

    container syslog-dispatcher {
        list syslog-filter {
            config true;
            key "filter-id";
            leaf filter-id {
                type string;
                description "the unique ID of registered filter.";
            }
            container filter-entity {
                uses meta-filter;
            }
            leaf callback-url {
                type string;
                description "callback URL of your app.";
            }
            list listener {
                key "listener-id";
                leaf listener-id {
                    type string;
                    description "the unique ID of each listener node.";
                }
            }
        }
        list syslog-listener {
            config false;
            key "listener-id";
            leaf listener-id {
                type string;
                description "the unique ID of each listener node.";
            }
            leaf syslog-message {
                type string;
                description "the message match certain filter will be installed here.";
            }
        }
    }

}
